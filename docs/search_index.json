[
["index.html", "R and Git combo RSE Induction: R and Git combo", " R and Git combo Tania Allard 2018-01-02 RSE Induction: R and Git combo Repo that makes this site: https://github.com/trallard/R_Git_combo "],
["why-git-why-github.html", "Chapter 1 Why Git? Why GitHub? 1.1 Why Git? 1.2 Why GitHub? 1.3 Is it going to hurt? 1.4 What is the payoff? 1.5 Who can do what? 1.6 Special features of GitHub 1.7 What’s special about using R with Git and GitHub? 1.8 Audience and pre-reqs 1.9 What this is NOT", " Chapter 1 Why Git? Why GitHub? Why would a researcher use hosted version control? 1.1 Why Git? Git is a version control system. Its original purpose was to help groups of developers work collaboratively on big software projects. Git manages the evolution of a set of files – called a repository – in a sane, highly structured way. If you have no idea what I’m talking about, think of it as the “Track Changes” features from Microsoft Word on steroids. Git has been re-purposed by the data science community. In addition to using it for source code, we use it to manage the motley collection of files that make up typical data analytical projects, which often consist of data, figures, reports, and, yes, source code. A solo data analyst, working on a single computer, will benefit from adopting version control. But not nearly enough to justify the pain of installation and workflow upheaval. There are much easier ways to get versioned back ups of your files, if that’s all you’re worried about. In my opinion, for new users, the pros of Git only outweigh the cons when you factor in the overhead of communicating and collaborating with other people. Who among us does not need to do that? Your life is much easier if this is baked into your workflow, as opposed to being a separate process that you dread or neglect. 1.2 Why GitHub? This is where hosting services like GitHub, Bitbucket, and GitLab come in. They provide a home for your Git-based projects on the internet. If you have no idea what I’m talking about, think of it as DropBox but much, much better. The remote host acts as a distribution channel or clearinghouse for your Git-managed project. It allows other people to see your stuff, sync up with you, and perhaps even make changes. These hosting providers improve upon traditional Unix Git servers with well-designed web-based interfaces. Even for private solo projects, it’s a good idea to push your work to a remote location for peace of mind. Why? Because it’s fairly easy to screw up your local Git repository, especially when you’re new at this. The good news is that often only the Git infrastructure is borked up. Your files are just fine! Which makes your Git pickle all the more frustrating. There are official Git solutions to these problems, but they might require expertise and patience you can’t access at 3a.m. If you’ve recently pushed your work to GitHub, it’s easy to grab a fresh copy, patch things up with the changes that only exist locally, and get on with your life. We target GitHub – not Bitbucket or GitLab – for the sake of specificity. However, all the big-picture principles and even some mechanics will carry over to these alternative hosting platforms. Don’t get too caught up on public versus private at this point. There are many ways to get private repositories from the major providers for low or no cost. Just get started and figure out if and how Git/GitHub is going to work for you! If you outgrow this arrangement, you can throw some combination of technical savvy and money at the problem. You can either pay for a higher level of service or self-host one of these platforms. 1.3 Is it going to hurt? Yes. You have to install Git, get local Git talking to GitHub, and make sure RStudio can talk to local Git (and, therefore, GitHub). This is one-time or once-per-computer pain. For new or existing projects, you will: Dedicate a directory (a.k.a “folder”) to it. Make it an RStudio Project. Make it a Git repository. Go about your usual business. But instead of only saving individual files, periodically you make a commit, which takes a multi-file snapshot of the entire project. Have you ever versioned a file by adding your initials or the date? That is effectively a commit, albeit only for a single file: it is a version that is significant to you and that you might want to inspect or revert to later. Push commits to GitHub periodically. This is like sharing a document with colleagues on DropBox or sending it out as an email attachment. It signals you’re ready to make your work visible to others and invite comment or edits. This is a change to your normal, daily workflow. It feels weird at first but quickly becomes second nature. The rest of this site is dedicated to walking you through the necessary setup and creating your first few Git projects. We conclude with prompts that guide you through some of the more advanced usage that makes all of this initial pain worthwhile. 1.4 What is the payoff? Exposure: If someone needs to see your work or if you want them to try out your code, they can easily get it from GitHub. If they use Git, they can clone or fork your repository. If they don’t use Git, they can still browse your project on GitHub like a normal website and even grab everything by downloading a zip archive. Be a keener! If you care deeply about someone else’s project, such as an R package you use heavily, you can track its development on GitHub. You can watch the repository to get notified of major activity. You can fork it to keep your own copy. You can modify your fork to add features or fix bugs and send them back to the owner as a proposed change. Collaboration: If you need to collaborate on data analysis or code development, then everyone should use Git. Use GitHub as your clearinghouse: individuals work independently, then send work back to GitHub for reconciliation and transmission to the rest of the team. The advantage of Git/GitHub is highlighted by comparing these two ways of collaborating on a document: Edit, save, attach. In this workflow, everyone has one (or more!) copies of the document and they circulate via email attachment. Which one is “master”? Is it even possible to say? How do different versions relate to each other? How should versions be reconciled? If you want to see the current best version, how do you get it? All of this usually gets sorted out by social contract and a fairly manual process. Google Doc. In this workflow, there is only one copy of the document and it lives in the cloud. Anyone can access the most recent version on demand. Anyone can edit or comment or propose a change and this is immediately available to everyone else. Anyone can see who’s been editing the document and, if disaster strikes, can revert to a previous version. A great deal of ambiguity and annoying reconciliation work has been designed away. Managing a project via Git/GitHub is much more like the Google Doc scenario and enjoys many of the same advantages. It is definitely more complicated than collaborating on a Google Doc, but this puts you in the right mindset. 1.5 Who can do what? A public repository is readable by the world. The owner can grant higher levels of permission to others, such as the ability to push commits. A private repository is invisible to the world. The owner can grant read, write (push), or admin access to others. There is also a formal notion of an organization, which can be useful for managing repository permissions for entire teams of people. 1.6 Special features of GitHub this is perhaps too detailed … full stop? or does it belong elsewhere? In addition to a well-designed user interface, GitHub offers two especially important features: Issues. Remember how we’re high-jacking software development tools? Well, this is the bug tracker. It’s a list of things … bugs, feature requests, to dos, whatever. Issues are tightly integrated with email and therefore allow you to copy/embed important conversations in the associated repo. Issues can be assigned to people (e.g., to dos) and tagged (“bug” or “progress-report”). Issues are tightly integrated with commits and therefore allow you to record that the changes in this commit solve that problem which was discussed in that issue. As a new user of GitHub, one of the most productive things you can do is to use GitHub issues to provide a clear bug report or feature request for a package you use. Pull requests. Git allows a project to have multiple, independent branches of development, with the notion that some should eventually be merged back into the main development branch. These are technical Git terms but hopefully also make sense on their own. A pull request is a formal proposal that says: “Here are some changes I would like to make.” It might be linked to a specific issue: “Related to #14.” or “Fixes #56”. GitHub facilitates and preserves the discussion of the proposal, holistically and line-by-line. 1.7 What’s special about using R with Git and GitHub? The active R package development community on GitHub. Read about R-specific GitHub resources and searching here. Specific workflows make it rewarding to share source code, rendered reports, and entire projects. Read more about R Markdown, R scripts, and R-heavy projects. Git- and GitHub-related features of the RStudio IDE. This is covered throughout. 1.8 Audience and pre-reqs The target audience for this site is someone who analyzes data, probably with R, though some of the content may be useful to analysts using other languages. R package development with Git(Hub) is absolutely in scope, but it is not an explicit focus or requirement. The site is aimed at intermediate to advanced R users, who are comfortable writing R scripts and managing R projects. You should have a good grasp of files and directories and be generally knowledgeable about where things live on your computer. Although we will show alternatives for most Git operations, we will inevitably spend some time in the shell and we assume some prior experience. For example, you should know how to open up a shell, navigate to a certain directory, and list the files there. You should be comfortable using shell commands to view/move/rename files and to work with your command history. 1.9 What this is NOT We aim to teach novices about Git on a strict “need to know” basis. Git was built to manage development of the Linux kernel, which is probably very different from what you do. Most people need a small subset of Git’s functionality and that will be our focus. If you want a full-blown exposition of Git as a directed acyclic graph or a treatise on the Git-Flow branching strategy, you will be sad. "],
["install-git.html", "Chapter 2 Installation 2.1 GitHub account 2.2 Username advice 2.3 R and Rstudio 2.4 Git", " Chapter 2 Installation Getting all the necessary software installed, configured, and playing nicely together is honestly half the battle here. Brace yourself for some pain. The upside is that you can give yourself a pat on the back once you get through this. And you WILL get through this. You will find far more resources for how to use Git than for installation and configuration. Why? The experts … Have been doing this for years. It’s simply not hard for them anymore. Probably use some flavor of Unix. They may secretly (or not so secretly) take pride in neither using nor knowing Windows. Get more satisfaction and reward for thinking and writing about Git concepts and workflows than Git installation. 2.1 GitHub account The first thing you need to do is to register for an account with GitHub. It’s free! https://github.com 2.2 Username advice You will be able upgrade to a paid level of service, apply discounts, join organizations, etc. in the future, so don’t fret about any of that now. Except your username. You might want to give that some thought. A few tips, which sadly tend to contradict each other: Incorporate your actual name! People like to know who they’re dealing with. Also makes your username easier for people to guess or remember. Reuse your username from other contexts, e.g., Twitter or Slack. But, of course, someone with no GitHub activity will probably be squatting on that. Pick a username you will be comfortable revealing to your future boss. Shorter is better than longer. Be as unique as possible in as few characters as possible. In some settings GitHub auto-completes or suggests usernames. Make it timeless. Don’t highlight your current university, employer, or place of residence. Avoid words laden with special meaning in programming. In my first inept efforts to script around the GitHub API, I assigned lots of issues to the guy with username NA because my vector of GitHub usernames contained missing values. A variant of Little Bobby Tables. You can change your username later, but better to get this right the first time. https://help.github.com/articles/changing-your-github-username/ https://help.github.com/articles/what-happens-when-i-change-my-username/ 2.3 R and Rstudio Install pre-compiled binary of R for your OS: https://cloud.r-project.org Install Preview version RStudio Desktop: https://www.rstudio.com/products/rstudio/download/preview/ Update your R packages: update.packages(ask = FALSE, checkBuilt = TRUE) Read on for more detail or hand-holding. 2.3.1 More about R and RStudio Get current, people. You don’t want to adopt new things on day one. But at some point, running old versions of software adds unnecessary difficulty. In live workshops, there is a limit to how much we can help with ancient versions of R or RStudio. Also, frankly, there is a limit to our motivation. By definition, these problems are going away and we’d rather focus on edge cases with current versions, which affect lots of people. 2.4 Git You need Git, so you can use it at the command line and so RStudio can call it. If there’s any chance it’s installed already, verify that, rejoice, and skip this step. Otherwise, find installation instructions below for your operating system. 2.4.1 Git already installed? From your shell command (terminal) Enter which git to request the path to your Git executable: which git ## /usr/bin/git and git --version to see its version: git --version ## git version 2.14.3 (Apple Git-98) If you are successful, that’s great! You have Git already. No need to install! Move on. If, instead, you see something more like git: command not found, keep reading. Mac OS users might get an immediate offer to install command line developer tools. Yes, you should accept! Click “Install” and read more below. 2.4.2 Windows Option 1 (recommended): Install Git for Windows, previously known as msysgit or “Git Bash”, to get Git in addition to some other useful tools, such as the Bash shell. Yes, all those names are totally confusing. You must select the “Use Git from the Windows Command Prompt” option during installation. You may accept all of the other default settings during installation. This approach leaves the Git executable in a conventional location, which will help you and other programs, e.g. RStudio, find it and use it. This also supports a transition to more expert use, because the Bash shell will be useful as you venture outside of R/RStudio. This also leaves you with a Git client, though not a very good one. RStudio for windows likes for git to be in the Files(x86) folder. If not in this location, RStudio may not detect it, and may cause headaches for you later. Option 2 (NOT recommended): The GitHub hosting site offers GitHub Desktop for Windows that provides Git itself, a client, and smooth integration with GitHub. Their Windows set-up instructions recommend this method of Git installation. Why don’t we like it? We’ve seen GitHub Desktop for Windows lead to Git installation in suboptimal locations, such as ~/AppData/Local, and in other places we could never find. If you were only going to interact with GitHub via this app, maybe that’s OK, but that does not apply to you. Therefore, we recommend option 1 instead. 2.4.3 Mac OS Option 1 (highly recommended): Install the Xcode command line tools (not all of Xcode), which includes Git. If your OS is older than 10.11 El Capitan, it is possible that you must install the Xcode command line tools in order for RStudio to find and use Git. Go to the shell and enter one of these commands to elicit an offer to install developer command line tools: git --version git config Accept the offer! Click on “Install”. Here’s another way to request this installation, more directly: xcode-select --install We just happen to find this Git-based trigger apropos. Note also that, after upgrading your Mac OS, you might need to re-do the above and/or re-agree to the Xcode license agreement. We have seen this cause the RStudio Git pane to disappear on a system where it was previously working. Use commands like those above to tickle Xcode into prompting you for what it needs, then restart RStudio. Option 2 (recommended): Install Git from here: http://git-scm.com/downloads. This arguably sets you up the best for the future. It will certainly get you the latest version of Git of all approaches described here. The GitHub home for this project is here: https://github.com/timcharper/git_osx_installer. At that link, there is a list of maintained builds for various combinations of Git and Mac OS version. If you’re running 10.7 Lion and struggling, we’ve had success in September 2015 with binaries found here: https://www.wandisco.com/git/download. Option 3 (recommended): If you anticipate getting heavily into scientific computing, you’re going to be installing and updating lots of software. You should check out homebrew, “the missing package manager for OS X”. Among many other things, it can install Git for you. Once you have Homebrew installed, do this in the shell: brew install git Option 4 (NOT recommended): The GitHub hosting site offers GitHub Desktop for Mac that provides the option to install Git itself, a client, and smooth integration with GitHub.. Their Mac set-up instructions recommend this method of Git installation. We don’t like GitHub Desktop as a Git client, so this is a very cumbersome way to install Git. Consider this option a last resort. 2.4.4 Linux Install Git via your distro’s package manager. Ubuntu or Debian Linux: sudo apt-get install git Fedora or RedHat Linux: sudo yum install git A comprehensive list for various Linux and Unix package managers: https://git-scm.com/download/linux "],
["introduction-to-git.html", "Chapter 3 Introduction to Git 3.1 More about git config", " Chapter 3 Introduction to Git You ideally will already have been trough a basic introduction to Git. The RSE introduction to Git materials can be found at: https://ooominds.github.io/RSE_induction/ As a basic, the first thing you need to do is to configure Git so that it knows who you are. From your shell / terminal type: git config --global user.name &#39;Tania Allard&#39; git config --global user.email &#39;t.allard@sheffield.ac.uk&#39; git config --global --list substituting your name and the email associated with your GitHub account. 3.1 More about git config From RStudio, go to Tools &gt; Shell and tell Git your name and GitHub email by typing (use your own name and email): Note: If you are on Windows, check the title bar of the shell that was opened! If you see cmd.exe at the end of the status bar, this is the Windows Command Prompt. If you instead see MINGW64 at the beginning, you have successfully opened Git Bash! Note: If you are not in an R Project that is version controlled with git, Tools &gt; Shell will open Windows Command Prompt. If this is the case and RStudio still opens cmd.exe, check Tools &gt; Global Options &gt; Git/SVN and tick the box for “Use Git Bash as shell for Git projects”. You may need to restart RStudio. git config --global user.name 'Tania Allard' This does NOT have to be your GitHub username, although it can be. Another good option is your actual first name and last name. Your commits will be labelled with this name, so this should be informative to potential collaborators. git config --global user.email 't.allard@sheffield.ac.uk' This must be the email that you used to sign up for GitHub. These commands return nothing. You can check that Git understood what you typed by looking at the output of git config --global --list. "],
["push-pull-github.html", "Chapter 4 Connect to GitHub 4.1 Make a repo on GitHub 4.2 Clone the repo to your local computer 4.3 Make a local change, commit, and push 4.4 Confirm the local change propagated to the GitHub remote 4.5 Am I really going to type GitHub username and password on each push? 4.6 Clean up", " Chapter 4 Connect to GitHub Objective: make sure that you can pull from and push to GitHub from your computer. I do not explain all terminal and Git commands in detail. This is a black box diagnostic / configuration exercise. In later chapters and in live workshops, we revisit these operations with much more narrative. 4.1 Make a repo on GitHub Go to https://github.com and make sure you are logged in. Click green “New repository” button. Or, if you are on your own profile page, click on “Repositories”, then click the green “New” button. Repository name: myrepo (or whatever you wish, we will delete this) Public YES Initialize this repository with a README Click big green button “Create repository.” Copy the HTTPS clone URL to your clipboard via the green “Clone or Download” button. 4.2 Clone the repo to your local computer From Rstudio open a terminal instance. Take charge of – or at least notice! – what directory you’re in. pwd to display working directory. cd to move around. Personally, I would do this sort of thing in ~/tmp. Clone myrepo from GitHub to your computer. This URL should have your GitHub username and the name of your practice repo. If your terminal cooperates, you should be able to paste the whole https://.... bit that we copied above. But some shells are not (immediately) clipboard aware. In that sad case, you must type it. Accurately. git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git This should look something like this: tania@Mictlan tmp $ git clone https://github.com/trallard/myrepo.git Cloning into &#39;myrepo&#39;... remote: Counting objects: 3, done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (3/3), done. Checking connectivity... done. Make this new repo your working directory, list its files, display the README, and get some information on its connection to GitHub: cd myrepo ls head README.md git remote show origin This should look something like this: tania@Mictlan~ $ cd myrepo tania@Mictlan myrepo $ ls README.md tania@Mictlan myrepo $ head README.md # myrepo tutorial development tania@Mictlan myrepo $ git remote show origin * remote origin Fetch URL: https://github.com/trallard/myrepo.git Push URL: https://github.com/trallard/myrepo.git HEAD branch: master Remote branch: master tracked Local branch configured for &#39;git pull&#39;: master merges with remote master Local ref configured for &#39;git push&#39;: master pushes to master (up to date) 4.3 Make a local change, commit, and push Add a line to README and verify that Git notices the change: echo &quot;A line I wrote on my local computer&quot; &gt;&gt; README.md git status This should look something like this: tania@Mictlan myrepo $ echo &quot;A line I wrote on my local computer&quot; &gt;&gt; README.md tania@Mictlan myrepo $ git status On branch master Your branch is up-to-date with &#39;origin/master&#39;. Changes not staged for commit: (use &quot;git add &lt;file&gt;...&quot; to update what will be committed) (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory) modified: README.md no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) Commit this change and push to your remote repo on GitHub. If you’re a new GitHub user, you will be challenged for your GitHub username and password. Provide them! git add -A git commit -m &quot;A commit from my local computer&quot; git push The -m flag is an important message that must be included with every commit! Git requires a commit message for every commit, so if you forget the -m flag, git will prompt you for a commit message anyways. It is good practice to write meaningful commit messages so in the future, potential collaborators (and your future self) will understand the progression of a project. This should look something like this: tania@Mictlan myrepo $ git add -A tania@Mictlan myrepo $ git commit -m &quot;A commit from my local computer&quot; [master de669ba] A commit from my local computer 1 file changed, 1 insertion(+) tania@Mictlan myrepo $ git push Counting objects: 3, done. Delta compression using up to 8 threads. Compressing objects: 100% (2/2), done. Writing objects: 100% (3/3), 311 bytes | 0 bytes/s, done. Total 3 (delta 0), reused 0 (delta 0) To https://github.com/trallard/myrepo.git b4112c5..de669ba master -&gt; master 4.4 Confirm the local change propagated to the GitHub remote Go back to the browser. I assume we’re still viewing your new GitHub repo. Refresh. You should see the new “A line I wrote on my local computer” in the README. If you click on “commits,” you should see one with the message “A commit from my local computer.” If you have made it this far, you are ready to graduate to using Git and GitHub with RStudio (chapter 7). But first … 4.5 Am I really going to type GitHub username and password on each push? It is likely that your first push, above, leads to a challenge for your GitHub username and password. This will drive you crazy in the long-run and make you reluctant to push. Do one of the following to eliminate this annoyance: Credential caching for HTTPS access, chapter 5. Set up SSH keys, chapter 6. Now is the perfect time to do this, since you have a functioning test repo. 4.6 Clean up Local When you’re ready to clean up, you can delete the local repo any way you like. It’s just a regular directory on your computer. Here’s how to do that in the shell, if current working directory is myrepo: cd .. rm -rf myrepo/ GitHub In the browser, go to your repo’s landing page on GitHub. Click on “Settings”. Scroll down, click on “delete repository,” and do as it asks. "],
["credential-caching.html", "Chapter 5 Cache credentials for HTTPS 5.1 Get a test repository 5.2 Verify that your Git is new enough to have a credential helper 5.3 Turn on the credential helper", " Chapter 5 Cache credentials for HTTPS If you plan to push/pull using HTTPS, you want Git to cache your credentials (username, password) (or you should set up SSH keys, chapter 6), so you don’t need to enter them over and over again. You’ll need to set this up on each computer you want to connect to GitHub from. 5.1 Get a test repository You need a functioning test Git repository. One that exists locally and remotely on GitHub, with the local repo tracking the remote. The repository from the previous exercise 4) from your local computer, will be perfect. If you have just verified that you can work with GitHub from RStudio (chapter 7), that test repo will also be perfect. You may proceed when You have a test repo. You know where it lives on your local computer. Example: /home/tania/tmp/myrepo You know where it lives on GitHub. Example: https://github.com/trallard/myrepo You know local is tracking remote. In a terminal with working directory set to the local Git repo, enter: git remote -v Output like this confirms that fetch and push are set to remote URLs that point to your GitHub repo: origin https://github.com/trallard/myrepo (fetch) origin https://github.com/trallard/myrepo (push) Now enter: git branch -vv Here we confirm that the local master branch has your GitHub master branch (origin/master) as upstream remote. Gibberish? Just check that your output looks similar to mine: master b8e03e3 [origin/master] line added locally 5.2 Verify that your Git is new enough to have a credential helper In a terminal, do: git --version and verify your version is 1.7.10 or newer. If not, update Git (chapter 2) or use SSH keys (chapter 6). 5.3 Turn on the credential helper 5.3.0.1 Windows In the terminal, enter: git config --global credential.helper wincred 5.3.0.2 Windows, plan B If that doesn’t seem to work, install an external credential helper. Download the git-credential-winstore.exe application. Run it! It should work if Git is in your PATH environment variable. If not, go to the directory where you downloaded the application and run the following: git-credential-winstore -i &quot;C:\\Program Files (x86)\\Git\\bin\\git.exe&quot; 5.3.0.3 Mac Find out if the credential helper is already installed. In the terminal, enter: git credential-osxkeychain And look for this output: usage: git credential-osxkeychain &lt;get|store|erase&gt; If you don’t get this output, it means you need a more recent version of Git, either via command line developer tools or Homebrew. Once you’ve confirmed you have the credential helper, enter: git config --global credential.helper osxkeychain 5.3.0.4 Linux In the terminal, enter: git config --global credential.helper &#39;cache --timeout=10000000&#39; to store your password for ten million seconds or around 16 weeks, enough for a semester. 5.3.1 Trigger a username / password challenge Change a file in your local repo and commit it. Do that however you wish. Here are terminal commands that will work: echo &quot;adding a line&quot; &gt;&gt; README.md git add -A git commit -m &quot;A commit from my local computer&quot; Now push! git push -u origin master One last time you will be asked for your username and password, which hopefully will be cached. Now push AGAIN. git push You should NOT be asked for your username and password, instead you should see Everything up-to-date. Rejoice and close the terminal. "],
["ssh-keys.html", "Chapter 6 Set up keys for SSH 6.1 SSH keys 6.2 Check for existing keys 6.3 Set up from RStudio 6.4 Set up from the terminal", " Chapter 6 Set up keys for SSH If you plan to push/pull using SSH, you need to set up SSH keys. You want to do this (or cache your username and password, chapter 5), so you don’t have to authenticate yourself interactively with GitHub over and over again. You’ll need to set this up on each computer you want to connect to GitHub from. 6.1 SSH keys SSH keys provide a more secure way of logging into a server than using a password alone. While a password can eventually be cracked with a brute force attack, SSH keys are nearly impossible to decipher by brute force alone. Generating a key pair provides you with two long strings of characters: a public and a private key. You can place the public key on any server, and then unlock it by connecting to it with a client that already has the private key. When the two match up, the system unlocks without the need for a password. You can increase security even more by protecting the private key with a passphrase. Adapted from instructions provided by GitHub and Digital Ocean. 6.2 Check for existing keys List existing keys (at least, those in the default location): ls -al ~/.ssh If you are told .ssh doesn’t exist, you don’t have SSH keys! Keep reading to create them. If you see a pair of files like id_rsa.pub and id_rsa, you have a key pair already. You can skip to the section about adding a key to the ssh-agent. 6.3 Set up from RStudio Instructions for setting up SSH keys from RStudio are given in the Git and GitHub chapter of Wickham’s R packages book. Look at the end of the section on initial set up: http://r-pkgs.had.co.nz/git.html#git-init 6.4 Set up from the terminal 6.4.1 Create SSH key pair Create the key pair by entering this, but substitute the email address associated with your GitHub account: $ ssh-keygen -t rsa -b 4096 -C &quot;t.allard@sheffield.ac.uk&quot; Accept the proposal to save the key in the default location, i.e., just press Enter here: Enter file in which to save the key (/Users/tania/.ssh/id_rsa): You have the option to protect the key with a passphrase. If you take it, you will want to configure something called the ssh-agent to manage this for you (more below). So either enter a passphrase (and store in your favorite password manager!) or decline by leaving this empty. Enter passphrase (empty for no passphrase): The process should complete now and should have looked like this: tania@Mictlan ~ $ ssh-keygen -t rsa -b 4096 -C &quot;t.allard@sheffield.ac.uk&quot; Generating public/private rsa key pair. Enter file in which to save the key (/Users/tania/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/tania/.ssh/id_rsa. Your public key has been saved in /Users/tania/.ssh/id_rsa.pub. The key fingerprint is: SHA256:ki0TNHm8qIvpH7/c0qQmdv2xxhYHCwlpn3+rVhKVeDo t.allard@sheffield.ac.uk The key&#39;s randomart image is: +---[RSA 4096]----+ | o+ . . | | .=.o . + | | ..= + + | | .+* E | | .= So = | | . +. = + | | o.. = ..* . | | o ++=.o =o. | | ..o.++o.=+. | +----[SHA256]-----+ 6.4.2 Add key to ssh-agent Tell your ssh-agent about the key and, especially, set it up to manage the passphrase, if you chose to set one. Make sure ssh-agent is enabled: tania@/Mictlan ~ $ eval &quot;$(ssh-agent -s)&quot; Agent pid 95727 Add your key. If you set a passphrase, you’ll be challenged for it here. Give it. tania@2015-mbp ~ $ ssh-add ~/.ssh/id_rsa Enter passphrase for /Users/tania/.ssh/id_rsa: Identity added: /Users/tania/.ssh/id_rsa (/Users/tania/.ssh/id_rsa) 6.4.3 Provide public key to GitHub Copy the public key onto your clipboard. Open ~/.ssh/id_rsa.pub in an editor and copy the contents to your clipboard or do one of the following at the command line: Mac OS: pbcopy &lt; ~/.ssh/id_rsa.pub Windows: clip &lt; ~/.ssh/id_rsa.pub Linux: xclip -sel clip &lt; ~/.ssh/id_rsa.pub Linux: if needed, install via apt-get or yum. For example, sudo apt-get install xclip. In the top right corner of any page on GitHub, click your profile photo, then click Settings. In the user settings sidebar, click SSH and GPG keys. Click New SSH key. In the “Title” field, add a descriptive label for the new key. For example, if you’re using a personal Mac, you might call this key “Personal MacBook Air”. Paste your key into the “Key” field. Click Add SSH key. Confirm the action by entering your GitHub password. "],
["rstudio-git-github.html", "Chapter 7 Connect RStudio to Git and GitHub 7.1 Prerequisites 7.2 Make a new repo on GitHub 7.3 Clone the new GitHub repository to your computer via RStudio 7.4 Make local changes, save, commit 7.5 Push your local changes online to GitHub 7.6 Confirm the local change propagated to the GitHub remote 7.7 Were you challenged for GitHub username and password? 7.8 Clean up", " Chapter 7 Connect RStudio to Git and GitHub Here we verify that RStudio can issue Git commands on your behalf. Assuming that you’ve gotten local Git to talk to GitHub, this means you’ll also be able to pull from and push to GitHub from RStudio. If you succeed here, your set up is DONE. 7.1 Prerequisites We assume the following: You’ve registered a free GitHub account. You’ve installed/updated R and RStudio. You’ve installed Git. You’ve introduced yourself to Git (chapter. You’ve confirmed that you can push to / pull from GitHub from the command line. 7.2 Make a new repo on GitHub Go to https://github.com and make sure you are logged in. Click green “New repository” button. Or, if you are on your own profile page, click on “Repositories”, then click the green “New” button. Repository name: myrepo (or whatever you wish, we will delete this) Public YES Initialize this repository with a README Click big green button “Create repository.” Copy the HTTPS clone URL to your clipboard via the green “Clone or Download” button. Or copy the SSH URL if you chose to set up SSH keys. 7.3 Clone the new GitHub repository to your computer via RStudio In RStudio, start a new Project: File &gt; New Project &gt; Version Control &gt; Git. In the “repository URL” paste the URL of your new GitHub repository. It will be something like this https://github.com/trallard/myrepo.git. Do you NOT see an option to get the Project from Version Control? Go to chapter 8 for tips on how to help RStudio find Git. Take charge of – or at least notice! – the local directory for the Project. A common rookie mistake is to have no idea where you are saving files or what your working directory is. Pay attention. Be intentional. Personally, I would do this in ~/tmp. I suggest you check “Open in new session”, as that’s what you’ll usually do in real life. Click “Create Project”. This should download the README.md file that we created on GitHub in the previous step. Look in RStudio’s file browser pane for the README.md file. 7.4 Make local changes, save, commit From RStudio, modify the README.md file, e.g., by adding the line “This is a line from RStudio”. Save your changes. Commit these changes to your local repo. How? From RStudio: Click the “Git” tab in upper right pane. Check “Staged” box for README.md. If you’re not already in the Git pop-up, click “Commit”. Type a message in “Commit message”, such as “Commit from RStudio”. Click “Commit”. 7.5 Push your local changes online to GitHub Click the green “Push” button to send your local changes to GitHub. If you are challenged for username and password, provide them (but see below). You should see some message along these lines. [master dc671f0] blah 3 files changed, 22 insertions(+) create mode 100644 .gitignore create mode 100644 myrepo.Rproj 7.6 Confirm the local change propagated to the GitHub remote Go back to the browser. I assume we’re still viewing your new GitHub repo. Refresh. You should see the new “This is a line from RStudio” in the README. If you click on “commits,” you should see one with the message “Commit from RStudio”. If you have made it this far, you are DONE with set up. But first … 7.7 Were you challenged for GitHub username and password? If you somehow haven’t done so yet, now is the perfect time to make sure you don’t need to keep providing username and password on each push. Pick one: Credential caching for HTTPS access, chapter 5. Set up SSH keys, chapter 6. Now is the perfect time to do this, since you have a functioning test repo. 7.8 Clean up Local When you’re ready to clean up, you can delete the local repo any way you like. It’s just a regular directory on your computer. GitHub In the browser, go to your repo’s landing page on GitHub. Click on “Settings”. Scroll down, click on “delete repository,” and do as it asks. "],
["rstudio-see-git.html", "Chapter 8 Detect Git from RStudio 8.1 Do you have a problem? 8.2 Find Git yourself 8.3 Tell RStudio where to find Git", " Chapter 8 Detect Git from RStudio If you want RStudio to help with your Git and GitHub work, it must be able to find the Git executable. This often “just works”, so this page is aimed at people who have reason to suspect they have a problem. This is something you set up once-per-computer. 8.1 Do you have a problem? Let’s check if RStudio can find the Git executable. File &gt; New Project… Do you see an option to create from Version Control? If yes, good. Select New Directory &gt; Empty Project. Do you see a checkbox “Create a git repository”? If yes, good, CHECK IT. Give this disposable test project a name and click Create Project. Do you see a “Git” tab in the upper right pane, the same one that has “Environment” and “History”? If yes, good. If all looks good, you can delete this project. Looks like RStudio and Git are talking to each other. Keep reading if things don’t go so well or you want to know more. 8.2 Find Git yourself RStudio can only act as a GUI front-end for Git if Git has been successfully installed AND RStudio can find it. A basic test for successful installation of Git is to simply enter git in the shell. If you get a complaint about Git not being found, it means installation was unsuccessful or that it is not being found, i.e. it is not on your PATH. If you are not sure where the Git executable lives, try this in a shell: which git (Mac, Linux) where git (most versions of Windows) 8.3 Tell RStudio where to find Git If Git appears to be installed and findable, launch RStudio. Quit and re-launch RStudio if there’s any doubt in your mind about whether you opened RStudio before or after installing Git. Don’t make me stop this car and restart RStudio for you in office hours. DO IT. From RStudio, go to Tools &gt; Global Options &gt; Git/SVN and make sure that the box Git executable points to … the Git executable. It should read something like: /usr/bin/git (Mac, Linux) C:/Program Files (x86)/Git/bin/git.exe (Windows) Here is a screenshot of someone doing this on a Windows machine. WARNING: On Windows, do NOT use C:/Program Files (x86)/Git/cmd/git.exe. bin in the path is GOOD YES! cmd in the path is BAD NO! WARNING: On Windows, do NOT use git-bash.exe. Something that ends in git.exe is GOOD YES! git-bash.exe is BAD NO! At times, we’ve had trouble navigating to the necessary directory on Mac OS, once we’ve clicked “Browse” and are working with a Finder-type window. The keyboard shortcut “command + shift + g” will summon “Go To Folder”, where you will be able to type or paste any path you want. Restart RStudio if you make any changes. Don’t make me stop this car again and restart RStudio for you in office hours. DO IT. Do the steps at the top of the page to see if RStudio and Git are communicating now. No joy? I’ve seen this help: With your Project open, go to Tools &gt; Project Options.... If available, click on “Git/SVN” and select “Git” in the Version control system dropdown menu. Answer “yes” to the “Confirm New Git Repository” pop up. Answer “yes” to the “Confirm Restart RStudio” pop up. If you installed Git via GitHub for Windows, it is possible the Git executable is really well hidden. Get our help or install Git another way. Your PATH is probably not set up correctly and/or you should re-install Git and control/notice where it’s going. Get our help. "],
["new-github-first.html", "Chapter 9 New project, GitHub first 9.1 Make a repo on GitHub 9.2 New RStudio Project via git clone 9.3 Make local changes, save, commit 9.4 Push your local changes to GitHub 9.5 Confirm the local change propagated to the GitHub remote 9.6 Make a change on GitHub 9.7 Pull from GitHub 9.8 The end", " Chapter 9 New project, GitHub first We create a new Project, with the preferred “GitHub first, then RStudio” sequence. Why do we prefer this? Because this method of copying the Project from GitHub to your computer also sets up the local Git repository for immediate pulling and pushing. Under the hood, we are doing git clone. You’ve actually done this before during set up (chapter 7). We’re doing it again, with feeling. 9.1 Make a repo on GitHub Do this once per new project. Go to https://github.com and make sure you are logged in. Click green “New repository” button. Or, if you are on your own profile page, click on “Repositories”, then click the green “New” button. Repository name: myrepo (or whatever you wish) Public YES Initialize this repository with a README Click the big green button “Create repository.” Copy the HTTPS clone URL to your clipboard via the green “Clone or Download” button. Or copy the SSH URL if you chose to set up SSH keys. 9.2 New RStudio Project via git clone In RStudio, start a new Project: File &gt; New Project &gt; Version Control &gt; Git. In the “repository URL” paste the URL of your new GitHub repository. It will be something like this https://github.com/trallard/myrepo.git. Be intentional about where you create this Project. Suggest you “Open in new session”. Click “Create Project” to create a new directory, which will be all of these things: a directory or “folder” on your computer a Git repository, linked to a remote GitHub repository an RStudio Project In the absence of other constraints, I suggest that all of your R projects have exactly this set-up. This should download the README.md file that we created on GitHub in the previous step. Look in RStudio’s file browser pane for the README.md file. There’s a big advantage to the “GitHub first, then RStudio” workflow: the remote GitHub repo is now the “upstream” remote for your local repo. This is a technical but important point about Git. The practical implication is that you are now set up to push and pull. No need to fanny around setting up Git remotes on the command line or in another Git client. 9.3 Make local changes, save, commit Do this every time you finish a valuable chunk of work, probably many times a day. From RStudio, modify the README.md file, e.g., by adding the line “This is a line from RStudio”. Save your changes. Commit these changes to your local repo. How? Click the “Git” tab in upper right pane Check “Staged” box for any files whose existence or modifications you want to commit. To see more detail on what’s changed in file since the last commit, click on “Diff” for a Git pop-up If you’re not already in the Git pop-up, click “Commit” Type a message in “Commit message”, such as “Commit from RStudio”. Click “Commit” 9.4 Push your local changes to GitHub Do this a few times a day, but possibly less often than you commit. You have new work in your local Git repository, but the changes are not online yet. This will seem counterintuitive, but first let’s stop and pull from GitHub. Why? Establish this habit for the future! If you make changes to the repo in the browser or from another machine or (one day) a collaborator has pushed, you will be happier if you pull those changes in before you attempt to push. Click the blue “Pull” button in the “Git” tab in RStudio. I doubt anything will happen, i.e. you’ll get the message “Already up-to-date.” This is just to establish a habit. Click the green “Push” button to send your local changes to GitHub. You should see some message along these lines. [master dc671f0] blah 3 files changed, 22 insertions(+) create mode 100644 .gitignore create mode 100644 myrepo.Rproj 9.5 Confirm the local change propagated to the GitHub remote Go back to the browser. I assume we’re still viewing your new GitHub repo. Refresh. You should see the new “This is a line from RStudio” in the README. If you click on “commits,” you should see one with the message “Commit from RStudio”. 9.6 Make a change on GitHub Click on README.md in the file listing on GitHub. In the upper right corner, click on the pencil for “Edit this file”. Add a line to this file, such as “Line added from GitHub.” Edit the commit message in “Commit changes” or accept the default. Click the big green button “Commit changes.” 9.7 Pull from GitHub Back in RStudio locally … Inspect your README.md. It should NOT have the line “Line added from GitHub”. It should be as you left it. Verify that. Click the blue Pull button. Look at README.md again. You should now see the new line there. 9.8 The end Now just … repeat. Do work somewhere. Commit it. Push it or pull it* depending on where you did it, but get local and remote “synced up”. Repeat. * Note that in general (and especially in future when collaborating with other developers) you will usually need to pull changes from the remote (GitHub) before pushing the local changes you have made. For this reason, it’s a good idea to try and get into the habit of pulling before you attempt to push. "],
["existing-github-first.html", "Chapter 10 Existing project, GitHub first 10.1 Make a repo on GitHub 10.2 New RStudio Project via git clone 10.3 Bring your existing project over 10.4 Stage and commit 10.5 Push your local changes to GitHub 10.6 Confirm the local change propagated to the GitHub remote 10.7 The end", " Chapter 10 Existing project, GitHub first A novice-friendly workflow for bringing an existing R project into the RStudio and Git/GitHub universe. We do this in a slightly awkward way, in order to avoid using Git at the command line. You won’t want to work this way forever, but it’s perfectly fine as you’re getting started! We assume you’ve got your existing R project isolated in a directory on your computer. If that’s not already true, make it so. Create a directory and marshal all the existing data and R scripts there. It doesn’t really matter where you do this, but note where the project currently lives. 10.1 Make a repo on GitHub Go to https://github.com and make sure you are logged in. Click the green “New repository” button. Or, if you are on your own profile page, click on “Repositories”, then click the green “New” button. Pick a repository name that actually reminds you what the project is about! But try to be concise. Public YES Initialize this repository with a README Click the big green button “Create repository.” Copy the HTTPS clone URL to your clipboard via the green “Clone or Download” button. Or copy the SSH URL if you chose to set up SSH keys. 10.2 New RStudio Project via git clone In RStudio, start a new Project: File &gt; New Project &gt; Version Control &gt; Git. In the “repository URL” paste the URL of your new GitHub repository. It will be something like this https://github.com/trallard/myrepo.git. Be intentional about where you create this Project. Suggest you “Open in new session”. Click “Create Project” to create a new directory, which will be all of these things: a directory or “folder” on your computer a Git repository, linked to a remote GitHub repository an RStudio Project This should download the README.md file that we created on GitHub in the previous step. Look in RStudio’s file browser pane for the README.md file. 10.3 Bring your existing project over Using your favorite method of moving or copying files, copy the files that constitute your existing project into the directory for this new project. In RStudio, consult the Git pane and the file browser. Are you seeing all the files? They should be here if your move/copy was successful. Are they showing up in the Git pane with questions marks? They should be appearing as new untracked files. 10.4 Stage and commit Commit your files to this repo. How? Click the “Git” tab in upper right pane Check “Staged” box for all files you want to commit. Default: stage it. When to reconsider: this will all go to GitHub. So do consider if that is appropriate for each file. You can absolutely keep a file locally, without committing it to the Git repo and sending to GitHub. Just let it sit there in your Git pane, without being staged. No harm will be done. If this is a long-term situation, list the file in .gitignore. If you’re not already in the Git pop-up, click “Commit” Type a message in “Commit message”, such as “init”. Click “Commit” 10.5 Push your local changes to GitHub Click the green “Push” button to send your local changes to GitHub. You should see some message along these lines. [master dc671f0] blah 3 files changed, 22 insertions(+) create mode 100644 .gitignore create mode 100644 myrepo.Rproj 10.6 Confirm the local change propagated to the GitHub remote Go back to the browser. I assume we’re still viewing your new GitHub repo. Refresh. You should see all the project files you committed there. If you click on “commits,” you should see one with the message “init”. 10.7 The end Now just … repeat. Do work somewhere. Commit it. Push it or pull it* depending on where you did it, but get local and remote “synced up”. Repeat. * Note that in general (and especially in future when collaborating with other developers) you will usually need to pull changes from the remote (GitHub) before pushing the local changes you have made. For this reason, it’s a good idea to try and get into the habit of pulling before you attempt to push. "],
["existing-github-last.html", "Chapter 11 Existing project, GitHub last 11.1 Make or verify an RStudio Project 11.2 Make or verify a Git repo 11.3 Stage and commit 11.4 Make a repo on GitHub 11.5 Connect to GitHub 11.6 Confirm the local change propagated to the GitHub remote 11.7 The end", " Chapter 11 Existing project, GitHub last An explicit workflow for connecting an existing local R project to GitHub, when for some reason you cannot or don’t want to do a “GitHub first” workflow (see chapter 10). When might this come up? Maybe if it’s an existing project that is also a Git repo with a history you care about? Then you have to do this properly. This is less desirable for a novice because it involves command line Git. You can’t stay within RStudio. 11.1 Make or verify an RStudio Project We assume you’ve got your existing R project isolated in a directory on your computer. If it’s not already an RStudio Project, make it so: Create a new RStudio project: File &gt; New Project &gt; Existing Directory. Yes: “Open in new session”. If it’s already an RStudio Project, launch it. 11.2 Make or verify a Git repo You should be in RStudio now, in your project. Is it already a Git repository? The presence of the Git pane should tip you off. If yes, you’re done. If not: Tools &gt; Project Options … &gt; Git/SVN Under Version control system, select “Git”. Confirm New Git Repository? Yes! Project should re-launch in RStudio and you should now have a Git pane. 11.3 Stage and commit If your local project was already a Git repo and was up-to-date, move on. Otherwise, you probably need to stage and commit. Click the “Git” tab in upper right pane Check “Staged” box for all files you want to commit. Default: stage it. When to reconsider: this will all go to GitHub. So do consider if that is appropriate for each file. You can absolutely keep a file locally, without committing it to the Git repo and sending to GitHub. Just let it sit there in your Git pane, without being staged. No harm will be done. If this is a long-term situation, list the file in .gitignore. If you’re not already in the Git pop-up, click “Commit” Type a message in “Commit message”. Click “Commit” 11.4 Make a repo on GitHub Go to https://github.com and make sure you are logged in. Click the green “New repository” button. Or, if you are on your own profile page, click on “Repositories”, then click the green “New” button. Pick a repository name – it should probably match the name of your local Project and directory. Why confuse yourself? Public or private, as appropriate and possible DO NOT initialize this repository with a README. Click the big green button “Create repository.” Copy the HTTPS clone URL to your clipboard via the green “Clone or Download” button. Or copy the SSH URL if you chose to set up SSH keys. 11.5 Connect to GitHub Initiate the “upstream” or “tracking” relationship by adding a remote. Go to Tools &gt; shell and do this, substituting the HTTPS or SSH URL for your GitHub repo, according to your setup: git remote add origin https://github.com/jennybc/myrepo.git Push and cement the tracking relationship between your GitHub repository and the local repo by pushing and setting the “upstream” remote: git push -u origin master 11.6 Confirm the local change propagated to the GitHub remote Go back to the browser. I assume we’re still viewing your new GitHub repo. Refresh. You should see all the project files you committed there. If you click on “commits,” you should see one with the message “init”. 11.7 The end Now just … repeat. Do work somewhere. Commit it. Push it or pull it* depending on where you did it, but get local and remote “synced up”. Repeat. * Note that in general (and especially in future when collaborating with other developers) you will usually need to pull changes from the remote (GitHub) before pushing the local changes you have made. For this reason, it’s a good idea to try and get into the habit of pulling before you attempt to push. "]
]
